import json
from datetime import datetime

class AdminPanel:
    def __init__(self):
        self.admin_id = "0616"  # Y√∂netici ID'si kurallara g√∂re g√ºncellendi
        self.customers = []  # M√º≈üteri listesi

    def admin_login(self):
        print("\n========================================")
        print("üîê Y√ñNETƒ∞Cƒ∞ Gƒ∞Rƒ∞≈ûƒ∞")
        print("========================================")
        
        admin_input = input("Y√∂netici ID: ")
        
        if admin_input == self.admin_id:
            print("\n‚úÖ Giri≈ü ba≈üarƒ±lƒ±!")
            self.show_admin_menu()
            return True
        else:
            print("\n‚ùå Hatalƒ± Y√∂netici ID!")
            return False

    def show_admin_menu(self):
        while True:
            print("\n========================================")
            print("üîß Y√ñNETƒ∞Cƒ∞ PANELƒ∞")
            print("========================================")
            print("1Ô∏è‚É£  T√ºm M√º≈üterileri Listele")
            print("0Ô∏è‚É£  √áƒ±kƒ±≈ü")
            print("========================================")
            
            secim = input("Se√ßiminiz: ")
            
            if secim == "1":
                self.tum_musterileri_listele()
            elif secim == "0":
                print("‚úÖ Y√∂netici panelinden √ßƒ±kƒ±≈ü yapƒ±ldƒ±.")
                break
            else:
                print("‚ùå Ge√ßersiz se√ßim!")

    def tum_musterileri_listele(self):
        try:
            with open('musteriler.json', 'r', encoding='utf-8') as file:
                data = json.load(file)
                musteriler = data["musteriler"]
            
            if not musteriler:
                print("‚ùå Kayƒ±tlƒ± m√º≈üteri bulunmamaktadƒ±r.")
                return
            
            while True:
                print("\nüìã M√ú≈ûTERƒ∞ Lƒ∞STESƒ∞")
                print("=" * 50)
                
                # S√ºsl√º numaralar listesi
                sayilar = ["1Ô∏è‚É£", "2Ô∏è‚É£", "3Ô∏è‚É£", "4Ô∏è‚É£", "5Ô∏è‚É£", "6Ô∏è‚É£", "7Ô∏è‚É£", "8Ô∏è‚É£", "9Ô∏è‚É£", "üîü"]
                
                # M√º≈üteri listesini olu≈ütur
                musteri_listesi = {}  # Se√ßim numarasƒ± -> m√º≈üteri e≈üle≈ümesi i√ßin s√∂zl√ºk
                for i, musteri in enumerate(musteriler, 1):
                    musteri_listesi[str(i)] = musteri
                    sayi = sayilar[i-1] if i <= len(sayilar) else f"{i}."
                    print(f"{sayi} üë§ {musteri['ad']} {musteri['soyad']} (Hesap No: {musteri['hesap_no']})")
                
                print("0Ô∏è‚É£ √áƒ±kƒ±≈ü")
                print("\nDetaylƒ± bilgi g√∂r√ºnt√ºlemek i√ßin m√º≈üteri numarasƒ±nƒ± girin")
                secim = input("Se√ßiminiz: ")
                
                if secim == "0":
                    break
                    
                if secim in musteri_listesi:
                    self.musteri_detay_goster(musteri_listesi[secim])
        except Exception as e:
            print(f"‚ùå Hata olu≈ütu: {str(e)}")

    def musteri_detay_goster(self, musteri):
        while True:
            print("\n" + "=" * 50)
            print("üîç M√ú≈ûTERƒ∞ DETAY MEN√úS√ú")
            print("=" * 50)
            print(f"üë§ {musteri['ad'].upper()} {musteri['soyad'].upper()}")
            print("-" * 50)
            print("1Ô∏è‚É£  Ki≈üisel Bilgileri G√∂r√ºnt√ºle")
            print("2Ô∏è‚É£  ƒ∞≈ülem Ge√ßmi≈üini G√∂r√ºnt√ºle")
            print("0Ô∏è‚É£  Geri D√∂n")
            print("-" * 50)
            
            secim = input("\nSe√ßiminiz: ")
            
            if secim == "1":
                self.musteri_bilgileri_goster(musteri)
            elif secim == "2":
                self.musteri_gecmis_goster(musteri)
            elif secim == "0":
                break
            else:
                print("\n‚ùå Ge√ßersiz se√ßim!")

    def musteri_bilgileri_goster(self, musteri):
        try:
            print("\n" + "=" * 50)
            print("üîç M√ú≈ûTERƒ∞ Bƒ∞LGƒ∞LERƒ∞")
            print("=" * 50)
            
            # Ki≈üisel Bilgiler B√∂l√ºm√º
            print("\nüë§ Kƒ∞≈ûƒ∞SEL Bƒ∞LGƒ∞LER")
            print("-" * 50)
            print(f"üìã Ad Soyad        : {musteri['ad'].title()} {musteri['soyad'].title()}")
            print(f"üÜî Hesap No        : {musteri['hesap_no']}")
            print(f"ü™™ TC Kimlik No    : {musteri.get('tc_kimlik_no', musteri.get('tc_no', 'Bilgi yok'))}")
            print(f"üìÖ Doƒüum Tarihi    : {musteri['dogum_tarihi']}")
            
            # ƒ∞leti≈üim Bilgileri B√∂l√ºm√º
            print("\nüìû ƒ∞LETƒ∞≈ûƒ∞M Bƒ∞LGƒ∞LERƒ∞")
            print("-" * 50)
            print(f"üì± Telefon         : {musteri['telefon']}")
            print(f"üìß Email           : {musteri['email']}")
            print(f"üìç Adres          : {musteri['adres']}")
            
            # Bakiye Bilgileri B√∂l√ºm√º
            print("\nüí∞ BAKƒ∞YE Bƒ∞LGƒ∞LERƒ∞")
            print("-" * 50)
            with open("hesaplar.json", "r", encoding="utf-8") as dosya:
                data = json.load(dosya)
                hesap = next((h for h in data["hesaplar"] if str(h["hesap_no"]) == str(musteri["hesap_no"])), None)
                
            if hesap:
                print(f"üíµ T√ºrk Lirasƒ±     : {float(hesap['bakiye_tl']):,.2f} TL")
                print(f"üíµ Dolar           : {float(hesap['bakiye_usd']):,.2f} USD")
                print(f"üí∂ Euro            : {float(hesap['bakiye_eur']):,.2f} EUR")
                print(f"üèÜ Altƒ±n           : {float(hesap['bakiye_altin']):,.2f} gr")
                print(f"ü•à G√ºm√º≈ü           : {float(hesap['bakiye_gumus']):,.2f} gr")
            else:
                print("\n‚ùå Bakiye bilgisi bulunamadƒ±!")
            
            print("\n" + "=" * 50)
            edit_choice = input("\nüìù Bilgileri d√ºzenlemek ister misiniz? (1: Evet / 0: Hayƒ±r): ")
            if edit_choice == "1":
                self.edit_customer_details(musteri)

        except Exception as e:
            print(f"\n‚ùå Bir hata olu≈ütu: {str(e)}")

    def edit_customer_details(self, musteri):
        print("\nüìù M√ú≈ûTERƒ∞ Bƒ∞LGƒ∞LERƒ∞Nƒ∞ D√úZENLE")
        print("=" * 50)
        
        # Ki≈üisel Bilgiler
        print("üë§ Kƒ∞≈ûƒ∞SEL Bƒ∞LGƒ∞LER")
        print("-" * 50)
        print("1. Ad")
        print("2. Soyad")
        print("3. TC Kimlik No")
        print("4. Hesap No")
        print("5. Doƒüum Tarihi")
        
        # ƒ∞leti≈üim Bilgileri
        print("\nüìû ƒ∞LETƒ∞≈ûƒ∞M Bƒ∞LGƒ∞LERƒ∞")
        print("-" * 50)
        print("6. Telefon Numarasƒ±")
        print("7. Email Adresi")
        print("8. Adres")
        
        print("\n0. Geri D√∂n")
        
        while True:
            secim = input("\nD√ºzenlemek istediƒüiniz bilgiyi se√ßin: ")
            
            if secim == "0":
                break
            elif secim == "1":
                yeni_ad = input("Yeni Ad: ")
                if yeni_ad:
                    musteri['ad'] = yeni_ad
            elif secim == "2":
                yeni_soyad = input("Yeni Soyad: ")
                if yeni_soyad:
                    musteri['soyad'] = yeni_soyad
            elif secim == "3":
                yeni_tc = input("Yeni TC Kimlik No: ")
                if yeni_tc and len(yeni_tc) == 11 and yeni_tc.isdigit():
                    musteri['tc_kimlik_no'] = yeni_tc
                else:
                    print("‚ùå Ge√ßersiz TC Kimlik No! 11 haneli rakam olmalƒ±dƒ±r.")
                    continue
            elif secim == "4":
                yeni_hesap_no = input("Yeni Hesap No: ")
                if yeni_hesap_no:
                    musteri['hesap_no'] = yeni_hesap_no
            elif secim == "5":
                yeni_dogum_tarihi = input("Yeni Doƒüum Tarihi (GG/AA/YYYY): ")
                if yeni_dogum_tarihi:
                    musteri['dogum_tarihi'] = yeni_dogum_tarihi
            elif secim == "6":
                yeni_telefon = input("Yeni Telefon Numarasƒ±: ")
                if yeni_telefon:
                    musteri['telefon'] = yeni_telefon
            elif secim == "7":
                yeni_email = input("Yeni Email Adresi: ")
                if yeni_email:
                    musteri['email'] = yeni_email
            elif secim == "8":
                yeni_adres = input("Yeni Adres: ")
                if yeni_adres:
                    musteri['adres'] = yeni_adres
            else:
                print("‚ùå Ge√ßersiz se√ßim!")
                continue
                
            # Deƒüi≈üiklikleri kaydet
            try:
                with open('musteriler.json', 'r', encoding='utf-8') as file:
                    data = json.load(file)
                    
                # M√º≈üteriyi g√ºncelle
                for i, m in enumerate(data['musteriler']):
                    if m['hesap_no'] == musteri['hesap_no']:
                        data['musteriler'][i] = musteri
                        break
                        
                with open('musteriler.json', 'w', encoding='utf-8') as file:
                    json.dump(data, file, indent=4, ensure_ascii=False)
                    
                print("\n‚úÖ Bilgiler ba≈üarƒ±yla g√ºncellendi!")
                
            except Exception as e:
                print(f"\n‚ùå G√ºncelleme sƒ±rasƒ±nda hata olu≈ütu: {str(e)}")
            
            devam = input("\nBa≈üka bir bilgi d√ºzenlemek ister misiniz? (1: Evet / 0: Hayƒ±r): ")
            if devam != "1":
                break

    def musteri_gecmis_goster(self, musteri):
        try:
            # ƒ∞≈ülem ge√ßmi≈üi dosyasƒ±nƒ± kontrol et
            try:
                with open("islem_gecmisi.json", "r", encoding="utf-8") as dosya:
                    data = json.load(dosya)
            except FileNotFoundError:
                print("\n‚ùå Hen√ºz i≈ülem ge√ßmi≈üi bulunmuyor.")
                return
                
            # M√º≈üteriye ait i≈ülemleri filtrele
            musteri_islemleri = [i for i in data.get("islemler", []) if str(i["hesap_no"]) == str(musteri["hesap_no"])]
            
            if not musteri_islemleri:
                print("\n‚ùå ƒ∞≈ülem ge√ßmi≈üi bulunamadƒ±!")
                return
                
            print("\n" + "=" * 50)
            print(f"üìã {musteri['ad'].upper()} {musteri['soyad'].upper()} ƒ∞≈ûLEM GE√áMƒ∞≈ûƒ∞")
            print("=" * 50)
            
            # D√∂viz/Emtia i≈ülemlerini filtrele
            print("\nüí± D√∂viz/Emtia Alƒ±≈ü/Satƒ±≈ü Ge√ßmi≈üi")
            print("-" * 50)
            doviz_islemler = [i for i in musteri_islemleri if any(tip in i['islem_tipi'] for tip in ['USD', 'EUR', 'ALTIN', 'GUMUS'])]
            
            if doviz_islemler:
                for islem in reversed(doviz_islemler):
                    print(f"üìÖ Tarih      : {islem['tarih']}")
                    print(f"üîÑ ƒ∞≈ülem Tipi : {islem['islem_tipi']}")
                    print(f"üí∞ Miktar     : {islem['miktar']} {islem['birim']}")
                    if "kur" in islem:
                        print(f"üíµ Kur        : {islem['kur']:.4f} TL")
                    print(f"üìù A√ßƒ±klama   : {islem['aciklama']}")
                    print("-" * 50)
            else:
                print("‚ùå D√∂viz/Emtia i≈ülemi bulunmamaktadƒ±r.")
                print("-" * 50)
            
            # Para transferi i≈ülemlerini filtrele
            print("\nüí∏ Para Transferi Ge√ßmi≈üi")
            print("-" * 50)
            transfer_islemler = [i for i in musteri_islemleri if 'Transfer' in i['islem_tipi']]
            
            if transfer_islemler:
                for islem in reversed(transfer_islemler):
                    print(f"üìÖ Tarih      : {islem['tarih']}")
                    print(f"üîÑ ƒ∞≈ülem Tipi : {islem['islem_tipi']}")
                    print(f"üí∞ Miktar     : {islem['miktar']} {islem['birim']}")
                    if "karsi_hesap" in islem:
                        print(f"üë§ Kar≈üƒ± Hesap: {islem['karsi_hesap']}")
                    print(f"üìù A√ßƒ±klama   : {islem['aciklama']}")
                    print("-" * 50)
            else:
                print("‚ùå Transfer i≈ülemi bulunmamaktadƒ±r.")
                print("-" * 50)
                
        except Exception as e:
            print(f"\n‚ùå ƒ∞≈ülem ge√ßmi≈üi g√∂r√ºnt√ºlenirken hata olu≈ütu: {str(e)}")
        
        input("\nAna men√ºye d√∂nmek i√ßin Enter'a basƒ±n...")

    def list_all_customers(self):
        if not self.customers:
            print("\n‚ùå Kayƒ±tlƒ± m√º≈üteri bulunmamaktadƒ±r.")
            return

        print("\n=== M√ú≈ûTERƒ∞ Lƒ∞STESƒ∞ ===")
        for i, customer in enumerate(self.customers, 1):
            print(f"{i}. üë§ {customer.name} {customer.surname} (Hesap No: {customer.account_number})")
        
        while True:
            customer_choice = input("\nDetaylƒ± bilgi g√∂r√ºnt√ºlemek i√ßin m√º≈üteri numarasƒ±nƒ± girin (√áƒ±kƒ±≈ü i√ßin 0): ")
            
            if customer_choice == "0":
                break
                
            try:
                customer_index = int(customer_choice) - 1
                if 0 <= customer_index < len(self.customers):
                    self.show_customer_details_menu(self.customers[customer_index])
                else:
                    print("\n‚ùå Ge√ßersiz m√º≈üteri numarasƒ±!")
            except ValueError:
                print("\n‚ùå Ge√ßersiz giri≈ü!")

    def show_customer_details_menu(self, customer):
        while True:
            print("\n1. M√º≈üteri Bilgileri G√∂r√ºnt√ºle")
            print("2. M√º≈üteri Ge√ßmi≈üi G√∂r√ºnt√ºle")
            print("3. Geri D√∂n")
            
            choice = input("\nSe√ßiminiz: ")
            
            if choice == "1":
                self.display_customer_details(customer)
            elif choice == "2":
                self.display_customer_history(customer)
            elif choice == "3":
                break
            else:
                print("\n‚ùå Ge√ßersiz se√ßim!")

    def display_customer_details(self, customer):
        print("\n=== M√ú≈ûTERƒ∞ DETAY Bƒ∞LGƒ∞LERƒ∞ ===")
        print(f"üë§ M√º≈üteri Adƒ± Soyadƒ±: {customer.name} {customer.surname}")
        print(f"üë§ TC Kimlik Numarasƒ±: {customer.tc_no}")
        print(f"üë§ Doƒüum Tarihi: {customer.birth_date}")
        print(f"üë§ Hesap Numarasƒ±: {customer.account_number}")
        print(f"üë§ Telefon Numarasƒ±: {customer.phone}")
        print(f"üë§ Email Adresi: {customer.email}")
        print(f"üë§ Adresi: {customer.address}")
        
        print("\n=== BAKƒ∞YE Bƒ∞LGƒ∞LERƒ∞ ===")
        print(f"üí∞ T√ºrk Lirasƒ± Bakiyesi: {customer.balance_tl} TL")
        print(f"üí∞ Dolar Bakiyesi: {customer.balance_usd} USD")
        print(f"üí∞ Euro Bakiyesi: {customer.balance_eur} EUR")
        print(f"üí∞ Altƒ±n Bakiyesi: {customer.balance_gold} gr")
        print(f"üí∞ G√ºm√º≈ü Bakiyesi: {customer.balance_silver} gr")
        
        edit_choice = input("\nBilgileri d√ºzenlemek ister misiniz? (1/0): ")
        if edit_choice == "1":
            self.edit_customer_details(customer)

    def display_customer_history(self, customer):
        print("\n=== M√ú≈ûTERƒ∞ ƒ∞≈ûLEM GE√áMƒ∞≈ûƒ∞ ===")
        if not customer.transaction_history:
            print("‚ùå ƒ∞≈ülem ge√ßmi≈üi bulunmamaktadƒ±r.")
            return
            
        for transaction in customer.transaction_history:
            print(f"\nTarih: {transaction.date}")
            print(f"ƒ∞≈ülem Tipi: {transaction.type}")
            print(f"ƒ∞≈ülem Miktarƒ±: {transaction.amount}")
            print(f"Hesap: {transaction.account}")
            print(f"ƒ∞≈ülem A√ßƒ±klamasƒ±: {transaction.description}")
            print("-" * 40)